import os
import datetime
import psycopg2
import requests
import time
import random
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
from tenacity import retry, wait_exponential, stop_after_attempt, retry_if_exception_type

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∏–∑ environment (Render)
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

KASPI_URL = "https://kaspi.kz/shop/c/shoes/?page=1"

print(f"üî• –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {datetime.datetime.now()}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
try:
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    cursor = conn.cursor()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", e)
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
try:
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shoes (
            id SERIAL PRIMARY KEY,
            name TEXT,
            price TEXT,
            url TEXT UNIQUE,
            created_at TIMESTAMP DEFAULT now()
        )
    """)
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", e)
    conn.close()
    exit(1)

# –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ 429
@retry(
    retry=retry_if_exception_type(Exception),
    wait=wait_exponential(multiplier=1, min=10, max=60),
    stop=stop_after_attempt(5)
)
def get_page():
    ua = UserAgent()
    headers = {"User-Agent": ua.random}
    response = requests.get(KASPI_URL, headers=headers)
    if response.status_code == 429:
        raise Exception("429 Too Many Requests")
    response.raise_for_status()
    return response.text

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
try:
    html = get_page()
    soup = BeautifulSoup(html, "html.parser")
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Kaspi –ø–æ–ª—É—á–µ–Ω–∞")
except Exception as e:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Kaspi:", e)
    conn.close()
    exit(1)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
products = soup.select("div.item-card__info")
print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")

inserted = 0
for p in products:
    try:
        name = p.select_one(".item-card__name").get_text(strip=True)
        price = p.select_one(".item-card__prices").get_text(strip=True)
        url = "https://kaspi.kz" + p.select_one("a")["href"]

        cursor.execute("""
            INSERT INTO shoes (name, price, url)
            VALUES (%s, %s, %s)
            ON CONFLICT (url) DO NOTHING
        """, (name, price, url))
        inserted += 1

        time.sleep(random.uniform(0.2, 0.7))  # –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏–º –Ω–∞ –≤—Å—è–∫–∏–π

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", e)
        continue

conn.commit()
cursor.close()
conn.close()

print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {inserted}")
print(f"üïí –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.datetime.now()}")
